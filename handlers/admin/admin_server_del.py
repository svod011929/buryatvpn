from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from loguru import logger
import aiosqlite

from handlers.database import db
from handlers.admin.admin_kb import get_servers_keyboard

router = Router()

class ServerDeleteStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_name = State()

@router.callback_query(F.data == "delete_server")
async def start_server_delete(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        if not await db.is_admin(callback.from_user.id):
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return

        await callback.message.delete()
        
        await callback.message.answer(
            "üóë –í–≤–µ–¥–∏—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            "–ü—Ä–∏–º–µ—Ä: https://3xui.example.com"
        )
        
        await state.set_state(ServerDeleteStates.waiting_for_url)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await callback.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_servers_keyboard()
        )

@router.message(ServerDeleteStates.waiting_for_url)
async def process_delete_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ URL –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        url = message.text.strip()
        
        async with aiosqlite.connect(db.db_path) as conn:
            async with conn.execute(
                "SELECT id, url FROM server_settings WHERE url = ?",
                (url,)
            ) as cursor:
                server = await cursor.fetchone()
                
                if not server:
                    await message.answer(
                        "‚ùå –°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.",
                        reply_markup=get_servers_keyboard()
                    )
                    await state.clear()
                    return

            server_id = server[0]

            await conn.execute(
                "UPDATE tariff SET is_enable = 0 WHERE server_id = ? AND is_enable = 1",
                (server_id,)
            )
            
            await conn.execute(
                "DELETE FROM server_settings WHERE url = ?",
                (url,)
            )
            await conn.commit()
        
        await message.answer(
            f"‚úÖ –°–µ—Ä–≤–µ—Ä {url} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
            reply_markup=get_servers_keyboard()
        )
        logger.info(f"–£–¥–∞–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä: {url}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_servers_keyboard()
        )
    finally:
        await state.clear()

@router.message(ServerDeleteStates.waiting_for_name)
async def process_delete_server(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ"""
    try:
        server_name = message.text.strip()
        
        async with aiosqlite.connect(db.db_path) as conn:
            async with conn.execute(
                "SELECT id, name FROM server_settings WHERE name = ? AND is_enable = 1",
                (server_name,)
            ) as cursor:
                server = await cursor.fetchone()
                
            if not server:
                await message.answer(
                    "‚ùå –°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=get_servers_keyboard()
                )
                await state.clear()
                return

            server_id = server[0]
                
            await conn.execute(
                "UPDATE tariff SET is_enable = 0 WHERE server_id = ? AND is_enable = 1",
                (server_id,)
            )
            
            async with conn.execute(
                "SELECT COUNT(*) FROM tariff WHERE server_id = ? AND is_enable = 0",
                (server_id,)
            ) as cursor:
                disabled_tariffs_count = (await cursor.fetchone())[0]

            await conn.execute(
                "UPDATE server_settings SET is_enable = 0 WHERE name = ?",
                (server_name,)
            )
            await conn.commit()
            
        success_message = f"‚úÖ –°–µ—Ä–≤–µ—Ä '{server_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        if disabled_tariffs_count > 0:
            success_message += f"\n–¢–∞–∫–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ {disabled_tariffs_count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"
            
        await message.answer(
            success_message,
            reply_markup=get_servers_keyboard()
        )
        logger.info(f"–£–¥–∞–ª–µ–Ω —Å–µ—Ä–≤–µ—Ä: {server_name} –∏ {disabled_tariffs_count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_servers_keyboard()
        )
    finally:
        await state.clear() 