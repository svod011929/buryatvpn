"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
"""

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from app.services.user_service import UserService
from app.bot.keyboards.user_keyboards import get_main_menu_keyboard
from app.bot.utils.messages import get_bot_message
from app.core.exceptions import UserNotFoundError
from config.logging import bot_logger

router = Router()
user_service = UserService()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏
        args = message.text.split(' ', 1)
        referral_code = args[1] if len(args) > 1 else None

        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            referred_by=referral_code
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_data.get('is_banned'):
            await message.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=None
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_msg = await get_bot_message('welcome')

        # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        name = user_data.get('first_name') or user_data.get('username') or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        text = welcome_msg['text'].format(name=name)

        await message.answer(
            text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode=welcome_msg.get('parse_mode', 'HTML')
        )

        bot_logger.info(f"User {message.from_user.id} started bot")

    except Exception as e:
        bot_logger.error(f"Error in start command: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    try:
        help_msg = await get_bot_message('help')

        await message.answer(
            help_msg['text'],
            parse_mode=help_msg.get('parse_mode', 'HTML'),
            reply_markup=get_main_menu_keyboard()
        )

    except Exception as e:
        bot_logger.error(f"Error in help command: {e}")
        await message.answer(
            "–ü–æ–º–æ—â—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile."""
    try:
        user_profile = await user_service.get_user_profile(message.from_user.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        profile_text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üÜî ID: {user_profile['telegram_id']}
üë§ –ò–º—è: {user_profile.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üè∑ Username: @{user_profile.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üìß Email: {user_profile.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if user_profile['trial_used'] else '–î–æ—Å—Ç—É–ø–µ–Ω'}
üí≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {1 if user_profile['has_active_subscription'] else 0}
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {user_profile['referral_stats']['total_referred']}

üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>
<code>https://t.me/{(await message.bot.get_me()).username}?start={user_profile['referral_code']}</code>

üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_profile['created_at'][:10] if user_profile['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
"""

        await message.answer(
            profile_text,
            parse_mode='HTML',
            reply_markup=get_main_menu_keyboard()
        )

    except UserNotFoundError:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        bot_logger.error(f"Error in profile command: {e}")
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    current_state = await state.get_state()

    if current_state is None:
        await message.answer(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_main_menu_keyboard()
        )
        return

    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_main_menu_keyboard()
    )

    bot_logger.info(f"User {message.from_user.id} cancelled action in state {current_state}")


def setup_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥."""
    dp.include_router(router)
