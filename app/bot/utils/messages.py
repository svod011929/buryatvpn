"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞.
"""

from typing import Dict, Optional
from app.database.repositories.base import BaseRepository
from app.database.models import BotMessage
from app.core.cache import cache, cached
from config.logging import bot_logger

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
bot_message_repo = BaseRepository(BotMessage)


@cached(ttl=3600, key_prefix="bot_message")
async def get_bot_message(key: str) -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –ø–æ –∫–ª—é—á—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        message = await bot_message_repo.get_by_field('key', key)

        if message:
            return {
                'text': message.text,
                'image_path': message.image_path,
                'parse_mode': message.parse_mode
            }
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return get_default_message(key)

    except Exception as e:
        bot_logger.error(f"Failed to get bot message '{key}': {e}")
        return get_default_message(key)


def get_default_message(key: str) -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""

    default_messages = {
        'welcome': {
            'text': """
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BuryatVPN, {name}!</b>

üöÄ <b>–í–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π VPN —Å–µ—Ä–≤–∏—Å</b>

‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
‚úÖ –°–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É  
‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

üéÅ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
‚Ä¢ –°–∫–∏–¥–∫–∏ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ
""",
            'parse_mode': 'HTML'
        },

        'help': {
            'text': """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É BuryatVPN</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
üåê <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
üí≥ <b>–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b> - –≤—ã–±–æ—Ä –∏ –ø–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
üéÅ <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b> - –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
üìû –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ 24/7
üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:</b>
üì± –î–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
""",
            'parse_mode': 'HTML'
        },

        'trial_available': {
            'text': """
üéÅ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b>

‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è
‚úÖ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚úÖ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏
‚úÖ –í—ã–±–æ—Ä –ª—é–±–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

‚ùóÔ∏è –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

–•–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥?
""",
            'parse_mode': 'HTML'
        },

        'trial_used': {
            'text': """
‚ÑπÔ∏è <b>–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</b>

–í—ã —É–∂–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º.

üí≥ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤:

üëá –ù–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
""",
            'parse_mode': 'HTML'
        },

        'no_subscriptions': {
            'text': """
üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫</b>

üéÅ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
üí≥ –ò–ª–∏ —Å—Ä–∞–∑—É –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É

üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
""",
            'parse_mode': 'HTML'
        },

        'error': {
            'text': """
‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7
""",
            'parse_mode': 'HTML'
        }
    }

    return default_messages.get(key, {
        'text': f'–°–æ–æ–±—â–µ–Ω–∏–µ "{key}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        'parse_mode': 'HTML'
    })


async def update_bot_message(key: str, text: str, image_path: str = None, parse_mode: str = 'HTML') -> bool:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        existing = await bot_message_repo.get_by_field('key', key)

        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ
            await bot_message_repo.update(
                existing.id,
                text=text,
                image_path=image_path,
                parse_mode=parse_mode
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            await bot_message_repo.create(
                key=key,
                text=text,
                image_path=image_path,
                parse_mode=parse_mode
            )

        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
        await cache.delete(f"bot_message:{key}")

        bot_logger.info(f"Bot message '{key}' updated")
        return True

    except Exception as e:
        bot_logger.error(f"Failed to update bot message '{key}': {e}")
        return False


def format_subscription_info(subscription: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ."""
    if not subscription:
        return "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    status_emoji = "‚úÖ" if subscription.get('is_active') else "‚ùå"
    trial_text = " (–ü—Ä–æ–±–Ω–∞—è)" if subscription.get('is_trial') else ""

    return f"""
{status_emoji} <b>{subscription.get('tariff_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ')}{trial_text}</b>

üñ• –°–µ—Ä–≤–µ—Ä: {subscription.get('server_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {subscription.get('end_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10] if subscription.get('end_date') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìä –¢—Ä–∞—Ñ–∏–∫: {format_traffic(subscription.get('traffic_used', 0))}
"""


def format_traffic(bytes_count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥."""
    if bytes_count == 0:
        return "0 B"

    units = ['B', 'KB', 'MB', 'GB', 'TB']
    unit_index = 0

    while bytes_count >= 1024 and unit_index < len(units) - 1:
        bytes_count /= 1024
        unit_index += 1

    return f"{bytes_count:.1f} {units[unit_index]}"


def format_price(amount: float, currency: str = "RUB") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã."""
    currency_symbols = {
        'RUB': '‚ÇΩ',
        'USD': '$',
        'EUR': '‚Ç¨',
        'BTC': '‚Çø',
        'ETH': 'Œû'
    }

    symbol = currency_symbols.get(currency, currency)
    return f"{amount:.2f} {symbol}"
